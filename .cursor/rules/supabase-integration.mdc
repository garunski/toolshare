description: Supabase integration patterns and database operations
globs:
  - src/common/operations/**/*.ts
  - src/common/supabase.ts
  - src/hooks/useAuth.ts
  - src/app/auth/**/*.tsx
alwaysApply: false
---

# Supabase Integration Standards

## Development Workflow
**IMPORTANT: All Supabase operations MUST be run using Taskfile commands.**
- Use `task database:supabase-start` to start Supabase services
- Use `task database:supabase-stop` to stop Supabase services
- Use `task database:supabase-reset` to reset the database (WARNING: deletes all data)
- Use `task database:db-migrate` to run database migrations
- Use `task database:db-migrate-new` to create new migrations
- Use `task database:db-seed` to seed the database
- Use `task database:db-types` to generate TypeScript types
- Use `task database:studio` to open Supabase Studio
- Use `task database:logs` to view Supabase logs
- Use `task dev:code-quality` to run all quality checks

## Client Setup
- Use single Supabase client instance
- Configure with environment variables
- Enable real-time subscriptions where needed
- Use Row Level Security (RLS) policies

## Database Operations

### Query Patterns
```typescript
// common/operations/toolOperations.ts
import { createClient } from '@supabase/supabase-js'
import { toolSchema, type Tool } from '@/common/validators/toolValidator'

const supabase = createClient(process.env.NEXT_PUBLIC_SUPABASE_URL!, process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!)

export async function fetchToolsByUserId(userId: string): Promise<Tool[]> {
  const { data, error } = await supabase
    .from('tools')
    .select('*')
    .eq('owner_id', userId)
    .order('created_at', { ascending: false })

  if (error) throw error
  
  return data.map(tool => toolSchema.parse(tool))
}
```

### Real-time Subscriptions
```typescript
// common/operations/loanStatusTracker.ts
export function subscribeToLoanUpdates(loanId: string, callback: (loan: Loan) => void) {
  return supabase
    .channel(`loan-${loanId}`)
    .on('postgres_changes', 
      { event: 'UPDATE', schema: 'public', table: 'loans', filter: `id=eq.${loanId}` },
      (payload) => callback(loanSchema.parse(payload.new))
    )
    .subscribe()
}
```

## Authentication
- Use Supabase Auth for user management
- Implement proper session handling
- Use middleware for protected routes
- Handle auth state changes properly

## Storage
- Use Supabase Storage for file uploads
- Implement proper file validation
- Use signed URLs for secure access
- Handle upload progress and errors

## Security
- Always use RLS policies
- Validate all inputs with Zod
- Use parameterized queries
- Implement proper error handling
- Never expose sensitive data in client code

## Type Generation
- Run `task database:db-types` to generate TypeScript types from database schema
- Use generated types for database operations
- Keep types in sync with schema changes
- Export types from dedicated type files
