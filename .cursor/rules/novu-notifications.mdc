description: Novu notification integration patterns and workflows
globs:
  - src/common/operations/**/*novu*.ts
  - src/components/**/*notification*.tsx
alwaysApply: false
---

# Novu Notification Integration

## Development Workflow
**IMPORTANT: All notification development operations MUST be run using Taskfile commands.**
- Use `task dev` to start the development server
- Use `task dev:type-check` to run TypeScript checks
- Use `task dev:lint` to check code quality
- Use `task dev:format` to format code
- Use `task dev:code-quality` to run all quality checks

## Setup & Configuration
- Use Novu Cloud for notification management
- Configure multiple channels (email, SMS, in-app)
- Set up notification templates in Novu dashboard
- Use environment variables for API keys

## Notification Patterns

### Subscriber Management
```typescript
// common/operations/novuSubscriberHandler.ts
import { Novu } from '@novu/node'

const novu = new Novu(process.env.NOVU_API_KEY!)

export async function createSubscriber(userId: string, userData: UserData) {
  await novu.subscribers.identify(userId, {
    email: userData.email,
    phone: userData.phone,
    firstName: userData.firstName,
    lastName: userData.lastName
  })
}
```

### Trigger Notifications
```typescript
// common/operations/loanReminderDispatcher.ts
export async function sendLoanReminder(loanId: string, userId: string) {
  await novu.trigger('loan-reminder', {
    to: {
      subscriberId: userId
    },
    payload: {
      loanId,
      toolName: 'Drill',
      dueDate: '2024-01-15'
    }
  })
}
```

## React Integration

### Notification Center
```typescript
// components/NotificationCenter.tsx
import { NovuProvider, PopoverNotificationCenter, NotificationBell } from '@novu/notification-center'

export function NotificationCenter() {
  return (
    <NovuProvider
      subscriberId={userId}
      applicationIdentifier={process.env.NEXT_PUBLIC_NOVU_APP_ID!}
    >
      <PopoverNotificationCenter>
        {({ unseenCount }) => <NotificationBell unseenCount={unseenCount} />}
      </PopoverNotificationCenter>
    </NovuProvider>
  )
}
```

## Workflow Management
- Create notification workflows for different events
- Implement escalation sequences (email → SMS → phone)
- Set up quiet hours and user preferences
- Handle notification delivery status

## Template Management
- Create templates for all notification types
- Use variables for dynamic content
- Test templates across all channels
- Maintain consistent branding

## Error Handling
- Handle notification delivery failures
- Implement retry logic for failed notifications
- Log notification events for debugging
- Provide fallback notification methods
---
