description: Technology stack, architecture, and component organization guidelines for the ToolShare project
globs:
  - src/**/*.tsx
  - src/**/*.ts
alwaysApply: true
---

# Technology Stack & Architecture

## Frontend
- **Framework**: Next.js 15 with App Router
- **UI Library**: Catalyst UI (shadcn/ui based)
- **Styling**: Tailwind CSS with Catalyst presets
- **Language**: TypeScript (strict mode)

## Backend & Database
- **Backend**: Supabase Cloud
- **Database**: PostgreSQL via Supabase
- **Authentication**: Supabase Auth
- **Storage**: Supabase Storage for images
- **Real-time**: Supabase subscriptions

## Notifications
- **Service**: Novu Cloud
- **Channels**: Email, SMS, In-app notifications
- **Integration**: React notification center

## Development Workflow
**IMPORTANT: All development operations MUST be run using Taskfile commands.**
- Use `task dev` to start the development server
- Use `task setup` for initial project setup
- Use `task status` to check project status

## Development Tools
- **Package Manager**: npm or yarn
- **Linting**: ESLint with custom rules
- **Type Generation**: `task database:db-types`
- **Deployment**: Vercel (recommended) or Digital Ocean

# Project Structure & Component Organization

## Directory Structure
```
src/
├── app/                    # Next.js App Router pages
│   ├── auth/              # Authentication pages
│   │   ├── login/
│   │   │   ├── page.tsx
│   │   │   └── components/     # Page-specific components
│   │   ├── register/
│   │   │   ├── page.tsx
│   │   │   └── components/
│   │   └── profile-setup/
│   │       ├── page.tsx
│   │       └── components/
│   └── dashboard/
│       ├── page.tsx
│       └── components/
├── common/                 # Shared utilities (singular)
│   ├── validators/        # Zod validation schemas
│   ├── operations/        # Business logic operations
│   ├── formatters/        # Data formatting functions
│   ├── generators/        # Content generation
│   ├── parsers/           # Data parsing
│   ├── transformers/      # Data transformation
│   └── calculators/       # Calculation functions
├── components/            # Shared components
│   └── ui/               # UI components (camelCase)
├── hooks/                # Custom React hooks (plural)
└── types/                # TypeScript type definitions (plural)

supabase/
├── migrations/           # Database migrations
├── seed.sql             # SQL seed data
├── seed-users.ts        # TypeScript user seeding
├── seed-data.ts         # TypeScript data seeding
└── config.toml          # Supabase configuration
```

## Component Placement Standards

### Page-Specific Components (Co-located)
**Page-specific components that are not reused should be co-located with their pages.**
- Components used only by a single page
- Form components specific to a page
- Layout components for a specific page
- Place in `src/app/[page]/components/`

### Shared Components
- Components used across multiple pages
- Reusable UI patterns
- Business logic components
- Place in `src/components/`

### UI Components
- Foundation UI components
- Located in `src/components/ui/`
- Follow camelCase naming (e.g., `formField.tsx`, `formContext.tsx`)

### Third-Party Components
- Catalyst UI components
- External library components
- DO NOT modify these components
- Import from their respective packages

## Naming Conventions
- **Page components**: `page.tsx`
- **Page-specific components**: `[Feature]Component.tsx`
- **Form components**: `[Feature]Form.tsx`
- **Field components**: `[Feature]FormFields.tsx`
- **UI components**: camelCase (e.g., `formField.tsx`)
- **Utilities**: camelCase (e.g., `classNameMerger.ts`)
- **Hooks**: camelCase with `use` prefix (e.g., `useAuth.ts`)

## Code Quality Standards
- **File Size**: All files MUST be under 150 lines
- **TypeScript**: Strict mode with proper typing
- **Validation**: Comprehensive Zod schemas for all data
- **Organization**: Single responsibility principle

## Key Dependencies
- `@supabase/supabase-js` - Supabase client
- `@novu/notification-center` - Novu notifications
- `zod` - Runtime validation
- `@catalyst-ui/react` - UI components

## Benefits of This Organization
- Easier to find related code
- Better code organization
- Reduced coupling between pages
- Clearer ownership of components
- Easier refactoring and maintenance
- Consistent naming conventions
- Proper separation of concerns
